import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;

class Problem11Test {

    @Test
    void testProblem11() {
        //db
        String[][] db1= new String[][]{
                {"ID", "Name", "Age", "Occupation", "Salary"},
                {"1", "2", "3", "4", "5"},
                {"6", "7", "8", "9", "10"},
                {"11", "12", "13", "14", "15"},
                {"16", "17", "18", "19", "20"},
                {"21", "22", "23", "24", "25"}
        };
        String[][] db2 = {
                {"ID", "Name", "Age", "Occupation", "Salary"},
                {"1", "John Smith", "52", "Accountant", "150000"},
                {"2", "Sarah Johnson", "77", "Teacher", "110000"},
                {"3", "Michael Brown", "38", "Mechanic", "130000"},
                {"4", "Emily Davis", "39", "Electrician", "100000"},
                {"5", "James Wilson", "70", "Plumber", "120000"},
                {"6", "Mary Clark", "40", "Office Manager", "120000"},
                {"7", "Robert Lewis", "54", "Nurse", "120000"},
                {"8", "Patricia Walker", "41", "HR Specialist", "140000"},
                {"9", "David Hall", "72", "IT Support", "110000"},
                {"10", "Jennifer Allen", "45", "Construction Worker", "130000"},
                {"11", "Joseph Young", "69", "Receptionist", "100000"},
                {"12", "Linda King", "30", "Pharmacist", "130000"},
                {"13", "Barbara Wright", "53", "Driver", "140000"},
                {"14", "William Scott", "49", "Salesperson", "140000"},
                {"15", "Richard Green", "64", "Cashier", "110000"},
                {"16", "Karen Adams", "79", "Customer Service Rep", "120000"},
                {"17", "Thomas Baker", "83", "Administrative Assistant", "115000"},
                {"18", "Susan Nelson", "72", "Janitor", "120000"},
                {"19", "Charles Carter", "50", "Security Guard", "150000"},
                {"20", "Jessica Mitchell", "69", "Data Entry Clerk", "120000"},
                {"21", "Daniel Perez", "57", "Bank Teller", "110000"},
                {"22", "Nancy Roberts", "83", "Warehouse Worker", "110000"},
                {"23", "Christopher Turner", "53", "Store Manager", "150000"},
                {"24", "Sharon Phillips", "78", "Cook", "130000"},
                {"25", "Matthew Campbell", "82", "Delivery Driver", "100000"},
                {"26", "Rebecca Parker", "60", "Administrative Assistant", "130000"},
                {"27", "Steven Evans", "56", "Taxi Driver", "140000"},
                {"28", "Michelle Edwards", "73", "Retail Worker", "120000"},
                {"29", "Kevin Collins", "42", "Data Analyst", "130000"},
                {"30", "Laura Stewart", "27", "Customer Support", "120000"}
        };

        Assertions.assertAll(
                //numeric comparators
                () -> Assertions.assertEquals( List.of("2"), Problem11.query(db1, "SELECT * WHERE Occupation = '4'")),
                () -> Assertions.assertEquals( List.of("7", "12", "17", "22"), Problem11.query(db1, "SELECT * WHERE Occupation != '4'")),
                () -> Assertions.assertEquals( List.of("2", "7", "12", "17", "22"), Problem11.query(db1, "SELECT * WHERE Salary > '4'")),
                () -> Assertions.assertEquals( List.of(), Problem11.query(db1, "SELECT * WHERE Salary < '4'")),
                () -> Assertions.assertEquals( List.of("2", "7", "12", "17", "22"), Problem11.query(db1, "SELECT * WHERE Salary >= '5'")),
                () -> Assertions.assertEquals( List.of("2", "7", "12"), Problem11.query(db1, "SELECT * WHERE Salary <= '15'")),

                () -> Assertions.assertEquals( List.of("Laura Stewart"), Problem11.query(db2, "SELECT 2 WHERE Age = '27'")),
                () -> Assertions.assertEquals( List.of("John Smith",
                        "Sarah Johnson",
                        "Michael Brown",
                        "Emily Davis",
                        "James Wilson",
                        "Mary Clark",
                        "Robert Lewis",
                        "Patricia Walker",
                        "David Hall",
                        "Jennifer Allen",
                        "Joseph Young",
                        "Linda King",
                        "Barbara Wright",
                        "William Scott",
                        "Richard Green",
                        "Karen Adams",
                        "Thomas Baker",
                        "Susan Nelson",
                        "Charles Carter",
                        "Jessica Mitchell",
                        "Daniel Perez",
                        "Nancy Roberts",
                        "Christopher Turner",
                        "Sharon Phillips",
                        "Matthew Campbell",
                        "Rebecca Parker",
                        "Steven Evans",
                        "Michelle Edwards",
                        "Kevin Collins"), Problem11.query(db2, "SELECT * WHERE Occupation != 'Customer Support'")),

                () -> Assertions.assertEquals( List.of("John Smith", "Patricia Walker", "Barbara Wright", "William Scott", "Charles Carter", "Christopher Turner", "Steven Evans"),
                        Problem11.query(db2, "SELECT * WHERE Salary >= '140000'")),
                () -> Assertions.assertEquals( List.of("John Smith",
                        "Sarah Johnson",
                        "Michael Brown",
                        "Emily Davis",
                        "James Wilson",
                        "Mary Clark",
                        "Robert Lewis",
                        "Patricia Walker",
                        "David Hall",
                        "Jennifer Allen",
                        "Joseph Young",
                        "Linda King",
                        "Barbara Wright",
                        "William Scott",
                        "Richard Green",
                        "Karen Adams",
                        "Thomas Baker",
                        "Susan Nelson",
                        "Charles Carter",
                        "Jessica Mitchell",
                        "Daniel Perez",
                        "Nancy Roberts",
                        "Christopher Turner",
                        "Sharon Phillips",
                        "Matthew Campbell",
                        "Rebecca Parker",
                        "Steven Evans",
                        "Michelle Edwards",
                        "Kevin Collins",
                        "Laura Stewart"), Problem11.query(db2, "SELECT * WHERE Salary < '1000000'")),
                () -> Assertions.assertEquals( List.of("John Smith", "Patricia Walker", "Barbara Wright", "William Scott", "Charles Carter", "Christopher Turner", "Steven Evans"), Problem11.query(db2, "SELECT * WHERE Salary >= '140000'")),
                () -> Assertions.assertEquals( List.of("John Smith",
                        "Sarah Johnson",
                        "Michael Brown",
                        "Emily Davis",
                        "James Wilson",
                        "Mary Clark",
                        "Robert Lewis",
                        "Patricia Walker",
                        "David Hall",
                        "Jennifer Allen",
                        "Joseph Young",
                        "Linda King",
                        "Barbara Wright",
                        "William Scott",
                        "Richard Green",
                        "Karen Adams",
                        "Thomas Baker",
                        "Susan Nelson",
                        "Charles Carter",
                        "Jessica Mitchell",
                        "Daniel Perez",
                        "Nancy Roberts",
                        "Christopher Turner",
                        "Sharon Phillips",
                        "Matthew Campbell",
                        "Rebecca Parker",
                        "Steven Evans",
                        "Michelle Edwards",
                        "Kevin Collins",
                        "Laura Stewart"), Problem11.query(db2, "SELECT * WHERE Salary <= '150000'")),

                //LIKE comparators
                () -> Assertions.assertEquals(List.of("John Smith", "James Wilson", "Jennifer Allen", "Joseph Young", "Jessica Mitchell"), Problem11.query(db2, "SELECT * WHERE Name LIKE 'J%'")),
                () -> Assertions.assertEquals(List.of("Emily Davis", "Robert Lewis", "Karen Adams", "Nancy Roberts"), Problem11.query(db2, "SELECT 4 WHERE Name LIKE '%s'")),
                () -> Assertions.assertEquals(List.of("Jennifer Allen", "Nancy Roberts", "Michelle Edwards"), Problem11.query(db2, "SELECT 3 WHERE Occupation LIKE '%W%'")),
                () -> Assertions.assertEquals(List.of("John Smith"), Problem11.query(db2, "SELECT 100 WHERE Occupation LIKE 'Accountant'"))
        );
    }
}
